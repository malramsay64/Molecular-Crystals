
t_shape = $(word 1, $(subst -,$(space),$(1)) )
t_temp = $(word 2, $(subst -,$(space),$(1)) )
t_rad = $(word 3, $(subst -,$(space),$(1)) )
t_dist = $(word 4, $(subst -,$(space),$(1)) )
t_theta = $(word 5, $(subst -,$(space),$(1)) )
t_crys = $(word 5, $(subst -,$(space),$(1)) )
t_bound = $(word 6, $(subst -,$(space),$(1)) )

FOLDERS=images trj trj_contact stats order logs
VPATH=.:$(my_dir):$(BIN_PATH):./.make:$(LIB):$(PREFIX)/restarts:$(PREFIX)/data:$(PREFIX):$(my_dir)/gnuplot:$(my_path)/lammps:$(PY_LIB)
vars = shape radius dist theta temp
all_plots = plot-order plot-frame plot-angle plot-dynamic plot-short-order plot-hist plot-props plot-short-order-hist
PRESENT=grouped individual

shape := $(call t_shape, $(mol))
radius := $(call t_rad, $(mol))
dist := $(call t_dist, $(mol))
theta := $(call t_theta, $(mol))
temp := $(call t_temp, $(mol))
bound := $(call t_bound, $(mol))

ifeq ($(shape), Snowman)
    atoms := 2
    t_crys := $(theta)
else
    atoms := 3
endif

ifneq ($(t_crys), )
ifneq ($(bound), )
    CREATE_IN:=$(BOUNDARY_IN)
	override prev_t := 0.0
else
    CREATE_IN:=$(CRYS_IN)
    bound:=
endif
endif
SAVE:=$(mol)

# Filenames generated from properties
ifeq ($(temp), $(prev_t))
    last_restart=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(n_mol) $(bound))).rt
else
    last_restart=$(subst $(space),-,$(strip $(prev_t) $(shape) $(radius) $(dist) $(theta) $(n_mol) $(bound))).rt
endif
restart=$(subst $(space),-,$(strip $(temp) $(shape) $(radius) $(dist) $(theta) $(n_mol) $(bound))).rt
molecule=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta))).mol
mol_settings=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(bound))).dat
base=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta)))

all:

.PHONY:test
test:
	@echo $(PREFIX)
	@echo $(my_dir)
	@echo $(LAMMPS_IN)
	@echo $(bound)
	@echo $(mol)
	@echo $(SAVE)
	@echo $(shape) $(radius) $(dist) $(theta) $(temp) $(prev_t)

# Create data files for molecule if not already generated
files: $(mol_settings)

# Generate crystal from unit cell in svg file
ifneq ($(t_crys), )
$(mol_settings): | data
	@echo Producing unit cell of $(base)
	@tail -2 $(my_dir)/crystals/$(base).svg | head -1 | $(PYTHON) $(PYLIB)/$(CRYS_FILE) $(PREFIX)/data $(n_mol) $(radius) $(dist) $(t_crys) $(bound)

# Create initial condition from a lattice with randomly oriented molecules
else
$(mol_settings): | data
	@echo Producing input
	@$(PYTHON) $(PYLIB)/$(FILES) $(PREFIX) $(shape) $(radius) $(dist) $(theta) $(ratio) $(n_mol) $(density)
endif


$(last_restart): $(mol_settings) | $(FOLDERS) $(mol_settings) restarts
	@echo Create $(last_restart)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(CREATE_VARS) $(LAMMPS_FLAGS) < $(CREATE_IN) > $(LOG)

#Equilibration run for molecule
$(restart): $(last_restart) | $(FOLDERS)
	@echo Equil $(restart) from $(last_restart)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(EQUIL_VARS) $(LAMMPS_FLAGS) < $(EQUIL_IN) > $(LOG)

# Production run, has already been equilibrated
lammps: $(restart) | .make
	@echo Production $(SAVE)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_VARS) $(LAMMPS_FLAGS) < $(LAMMPS_IN) > $(LOG)
	@touch .make/lammps

# Analysis of run, both static and dynamic quantities
contact: lammps program #$(basename $(molecule)).csv  plot.settings
	@echo analysis $(SAVE)/trj/out.lammpstrj
	@$(BIN_PATH)/program -i trj/out.lammpstrj $(shell echo $(steps)/$(print) | bc) > contact.log
	@touch .make/contact

# Plots all the analysis
plot: $(all_plots)
	@echo Generating Plots
	@touch .make/plot

plot-order: contact order.plot | order
	@for file in order/*.csv; do\
        gnuplot -e "filename='$${file%.*}'" $(my_dir)/gnuplot/order.plot  &> $(LOG);\
    done
	@touch .make/plot-order

plot-hist: contact hist.plot | order
	@gnuplot $(my_dir)/gnuplot/hist.plot &> $(LOG)
	@touch .make/plot-hist

plot-frame: contact frame.plot
	@for file in trj_contact/*.dat; do\
        gnuplot -e "filename='$${file%.*}'" $(my_dir)/gnuplot/frame.plot  &> $(LOG);\
    done
	@touch .make/plot-frame

plot-angle: contact angle.plot
	@for file in trj_contact/*.csv; do\
        gnuplot -e "filename='$${file%.*}'" $(my_dir)/gnuplot/angle.plot  &> $(LOG);\
    done
	@touch .make/plot-angle

plot-short-order-hist: contact short_order_hist.plot
	@gnuplot $(my_dir)/gnuplot/short_order_hist.plot &> $(LOG)
	@touch .make/plot-short-order-hist

plot-dynamic: contact dynamic.plot
	@gnuplot $(my_dir)/gnuplot/dynamic.plot &> $(LOG)
	@touch .make/plot-dynamic

plot-short-order: contact short_order.plot
	@gnuplot $(my_dir)/gnuplot/short_order.plot &> $(LOG)
	@touch .make/plot-short-order

plot-props: lammps
	@python $(PYLIB)/makeplot.py logs/prod.log props.csv $(thermo)
	@gnuplot $(my_dir)/gnuplot/property.plot &> $(LOG)
	@touch .make/plot-props

density: contact
	@echo Calculating density
	@python $(PYLIB)/density.py logs/prod.log $(radius) $(dist) $(theta) >> contact.log
	@touch .make/density

settings: $(VAR_MOLECULE) $(VAR_SYSTEM)
	-rm -f settings
	$(foreach v, $(vars), echo "$v = $($v)" >> settings;)

present:$(PRESENT)

$(PRESENT): plot density plot-props
	@-rm -f mol_pres.tex
	@python $(my_dir)/output/presentEach.py $(PREFIX)/$(SAVE) >> mol_pres.tex
	@touch .make/present

.make:
	@-mkdir .make

data:
	@mkdir -p $(PREFIX)/data

restarts:
	@mkdir -p $(PREFIX)/restarts

$(FOLDERS):
	@mkdir -p $@

.PHONY: clean-present
clean-present:
	-rm .make/present
	-rm mol_pres.tex

.PHONY: touch-lammps
touch-lammps: | .make
	touch .make/lammps

.PHONY: clean
clean:
	-rm -rf .make

.PHONY: clean-all
clean-all: clean-files clean-lammps clean clean-contact clean-plot clean-density clean-restart
	
.PHONY: clean-contact
clean-contact: clean-plot clean-density
	rm -rf trj_contact stats order
	rm -f *.csv *.log
	rm -f .make/contact

.PHONY: clean-density
clean-density: clean-present
	rm -f .make/density

.PHONY: clean-plot
clean-plot: clean-present
	rm -f order/*.png
	rm -f *.png
	rm -f trj_contact/*.png
	rm -f trj_contact/*.pdf
	rm -f .make/plot*

.PHONY: clean-files
clean-files: clean-restart
	rm -rf ../data
	rm -f .make/files

.PHONY:clean-restart
clean-restart: clean-lammps
	rm -rf ../restarts

.PHONY: clean-lammps
clean-lammps: clean-contact
	$(foreach folder, $(FOLDERS), rm -rf $(folder);)
	rm -f .make/lammps
