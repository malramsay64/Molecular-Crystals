include $(my_dir)/vars.mak

# Variable setup

include $(my_dir)/vars.mak

VPATH=.:$(my_dir):$(BIN_PATH):./.make:$(LIB):$(PREFIX)/restarts:$(PREFIX)/data:$(PREFIX):$(my_dir)/gnuplot:$(my_path)/lammps:$(PY_LIB)

shape := $(call t_shape, $(mol))
radius := $(call t_rad, $(mol))
dist := $(call t_dist, $(mol))
theta := $(call t_theta, $(mol))
temp := $(call t_temp, $(mol))
bound := $(call t_bound, $(mol))

to_plot:=$(addprefix plot-, $(to_plot))

ifeq ($(shape), Snowman)
    atoms := 2
    t_crys := $(theta)
else
    atoms := 3
endif

ifneq ($(t_crys), )
ifneq ($(bound), )
    CREATE_IN:=$(BOUNDARY_IN)
	override prev_t := 0.0
else
    CREATE_IN:=$(CRYS_IN)
    bound:=
endif
endif
SAVE:=$(mol)

# Filenames generated from properties
ifeq ($(temp), $(prev_t))
    last_restart=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(n_mol) $(bound))).rt
else
    last_restart=$(subst $(space),-,$(strip $(prev_t) $(shape) $(radius) $(dist) $(theta) $(n_mol) $(bound))).rt
endif
restart=$(subst $(space),-,$(strip $(temp) $(shape) $(radius) $(dist) $(theta) $(n_mol) $(bound))).rt
molecule=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta))).mol
mol_settings=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(bound))).dat
base=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta)))

# Equilibrate all boundaries from same initial state at 'T = 0.0'
ifneq ($(bound), )
	CREATE_VARS:=-v T $(temp) $(CREATE_VARS)
endif


###################################################################

all:

.PHONY:test
test:
	@echo $(all_clean)
	@echo $(shape)
	@echo $(to_plot)
	
# Create data files for molecule if not already generated
files: $(mol_settings)

# Generate crystal from unit cell in svg file
ifneq ($(t_crys), )
$(mol_settings): | data
	@echo Producing unit cell of $(base)
	@tail -2 $(my_dir)/crystals/$(base).svg | head -1 | $(PYTHON) $(PYLIB)/$(CRYS_FILE) $(PREFIX)/data $(n_mol) $(radius) $(dist) $(t_crys) $(bound)

# Create initial condition from a lattice with randomly oriented molecules
else
$(mol_settings): | data
	@echo Producing input
	@$(PYTHON) $(PYLIB)/$(FILES) $(PREFIX) $(shape) $(radius) $(dist) $(theta) $(ratio) $(n_mol) $(density)
endif

$(last_restart): $(mol_settings) | $(FOLDERS) $(mol_settings) restarts
	@echo Create $(last_restart)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(CREATE_VARS) < $(CREATE_IN) > $(LOG)

#Equilibration run for molecule
$(restart): $(last_restart) | $(FOLDERS)
	@echo Equil $(restart) from $(last_restart)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(EQUIL_VARS) < $(EQUIL_IN) > $(LOG)

# Production run, has already been equilibrated
lammps: | $(restart) .make
	@echo Production $(SAVE)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(LAMMPS_VARS) < $(LAMMPS_IN) > $(LOG)
	@touch .make/lammps

# Analysis of run, both static and dynamic quantities
contact: lammps program #$(basename $(molecule)).csv  plot.settings
	@echo analysis $(SAVE)/trj/out.lammpstrj
	@$(BIN_PATH)/program -i trj/out.lammpstrj $(contact_args) > contact.log
	@touch .make/contact

movie: contact

collate: contact density

status:

density: contact
	@echo Calculating density
	@python $(PYLIB)/density.py logs/prod.log $(radius) $(dist) $(theta) >> contact.log
	@touch .make/density

present:$(PRESENT)

$(PRESENT): plot density plot-props
	@-rm -f mol_pres.tex
	@python $(my_dir)/output/presentEach.py $(PREFIX)/$(SAVE) >> mol_pres.tex
	@touch .make/present

.make:
	@-mkdir .make

data:
	@mkdir -p $(PREFIX)/data

restarts:
	@mkdir -p $(PREFIX)/restarts

$(FOLDERS):
	@mkdir -p $@

.PHONY: touch-lammps
touch-lammps: | .make
	touch .make/lammps

# Plots {{{
# ---------

plot: $(to_plot)
	@echo Generating Plots
	@touch .make/plot

plot-order: contact order.plot | order
	@for file in order/*.csv; do\
        gnuplot -e "filename='$${file%.*}'" $(my_dir)/gnuplot/order.plot  &> $(LOG);\
    done
	@touch .make/plot-order

plot-%: %.plot contact
	@gnuplot -e "prefix='$(shell pwd)'" $(my_dir)/gnuplot/$<  &> $(LOG)
	@touch .make/$@

plot-angle: contact angle.plot
	@for file in trj_contact/*.csv; do\
        gnuplot -e "filename='$${file%.*}'" $(my_dir)/gnuplot/angle.plot  &> $(LOG);\
    done
	@touch .make/plot-angle

plot-props: lammps
	@python $(PYLIB)/makeplot.py logs/prod.log props.csv $(thermo)
	@gnuplot $(my_dir)/gnuplot/property.plot &> $(LOG)
	@touch .make/plot-props

# }}}
# Clean functions {{{

.PHONY: clean-all $(all_clean)
clean-all:$(all_clean)

clean-files: clean-restart
	rm -rf ../data
	rm -f .make/files

clean-restart: clean-lammps
	rm -rf ../restarts

clean-lammps: clean-contact
	rm -rf $(folder)
	rm -f .make/lammps

clean-contact: clean-plot clean-density
	rm -rf trj_contact stats order
	rm -f *.csv *.log
	rm -f .make/contact

clean-density: clean-present
	rm -f .make/density

clean-plot: clean-present
	rm -f order/*.png
	rm -f *.png
	rm -f trj_contact/*.png
	rm -f trj_contact/*.pdf
	rm -f .make/plot*

clean-present:
	-rm -f .make/present
	-rm -f mol_pres.tex

#}}}
# vim:foldmethod=marker:foldlevel=0
