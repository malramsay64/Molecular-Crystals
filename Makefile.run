include $(my_dir)/vars.mak

# Variable setup

include $(my_dir)/vars.mak

VPATH=.:$(my_dir):$(BIN_PATH):./.make:$(LIB):$(PREFIX)/restarts:$(PREFIX)/data:$(PREFIX):$(my_dir)/gnuplot:$(my_dir)/lammps_in:$(PYLIB):latex

ifneq ($(dimers), )
	shape := $(call p_shape, $(mol))
	radius := $(call p_rad, $(mol))
	dist := $(call p_dist, $(mol))
	theta := $(call p_theta, $(mol))
else
	shape := $(call t_shape, $(mol))
	temp := $(call t_temp, $(mol))
	radius := $(call t_rad, $(mol))
	dist := $(call t_dist, $(mol))
ifeq ($(shape), Snowman)
    atoms := 2
	crys := $(call t_crys, $(mol))
	bound := $(call t_bound, $(mol))
	theta := $(empty)
ifeq ($(temp), $(prev_t))
	last_restart=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(crys) $(n_mol) $(bound))).rt
else
    last_restart=$(subst $(space),-,$(strip $(prev_t) $(shape) $(radius) $(dist) $(crys) $(n_mol) $(bound))).rt
endif
	restart=$(subst $(space),-,$(strip $(temp) $(shape) $(radius) $(dist) $(crys) $(n_mol) $(bound))).rt
	molecule=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(crys))).mol
	mol_settings=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(crys) $(bound))).dat
	base=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(crys)))
else ifeq ($(shape), Trimer)
	atoms := 3
	theta = $(call t_theta, $(mol))
	crys = $(call t_tri_crys, $(mol))
	bound := $(call t_tri_bound, $(mol))
ifeq ($(temp), $(prev_t))
    last_restart=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(crys) $(n_mol) $(bound))).rt
else
    last_restart=$(subst $(space),-,$(strip $(prev_t) $(shape) $(radius) $(dist) $(theta) $(crys) $(n_mol) $(bound))).rt
endif
	restart=$(subst $(space),-,$(strip $(temp) $(shape) $(radius) $(dist) $(theta) $(crys) $(n_mol) $(bound))).rt
	molecule=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(crys))).mol
	mol_settings=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(crys) $(bound))).dat
	base=$(subst $(space),-,$(strip $(shape) $(radius) $(dist) $(theta) $(crys)))
else ifeq ($(shape), Disc)
	atoms := 1
endif
endif

#to_plot:=$(addprefix plot-, $(to_plot))
create_t = 5.0

ifneq ($(crys), )
	override prev_t := 0.0
ifneq ($(bound), )
    CREATE_IN:=$(BOUNDARY_IN)
else
    CREATE_IN:=$(CRYS_IN)
    bound:=
endif
endif
SAVE:=$(mol)

# Filenames generated from properties

# Equilibrate all boundaries from same initial state at 'T = 0.0'
ifneq ($(crys), )
	CREATE_VARS:=-v T $(temp) $(CREATE_VARS)
endif

ifneq ($(shape), Disc)
	LAMMPS_MOL_VARS += -v radius $(radius)
	CREATE_VARS += -v radius $(radius)
else
	LAMMPS_MOL_VARS += -v radius 1
endif


###################################################################

all:

test:
	@echo $(mol)

# Create data files for molecule if not already generated
files: $(mol_settings)

# Generate crystal from unit cell in svg file
ifneq ($(crys), )
$(mol_settings): | data
	@echo Producing unit cell of $(base)
	tail -2 $(call crys_dir,$(base))/$(base).svg | head -1 | $(PYTHON) $(PYLIB)/$(CRYS_FILE) $(PREFIX)/data $(n_mol) $(shape) $(radius) $(dist) $(theta) $(crys) $(bound)

# Generate Dimers
else ifneq ($(dimers), )
$(mol_settings): | data
	@echo Producing dimers of $(base)
	@python $(PYLIB)/$(CREATE_DIMERS) $(PREFIX)/data $(subst -,$(space),$(mol))

# Create initial condition from a lattice with randomly oriented molecules
else
$(mol_settings): | data
	@echo Producing input
	@$(PYTHON) $(PYLIB)/$(FILES) $(PREFIX) $(shape) $(radius) $(dist) $(theta) $(ratio) $(n_mol) $(density)
endif

$(last_restart): $(mol_settings) | $(FOLDERS) restarts
	@echo Create $(last_restart)
	$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(CREATE_VARS) < $(CREATE_IN) > $(LOG)

#Equilibration run for molecule
$(restart): | $(last_restart) $(FOLDERS)
	@echo Equil $(restart) from $(last_restart)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(EQUIL_VARS) < $(EQUIL_IN) > $(LOG)

# Production run, has already been equilibrated
ifeq ($(print), 0)
lammps: steps.dat | $(restart) .make $(FOLDERS) 
	@echo Production $(SAVE)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(LAMMPS_VARS) < $(LAMMPS_IN) > $(LOG)
	@touch .make/lammps

else ifneq ($(dimers),)
lammps: $(mol_settings) | .make $(FOLDERS)
	@echo Minimising dimers $(SAVE)
	@$(foreach d, $(dimers), $(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(LAMMPS_VARS) -v dimer $d -v mymol $(mol) -log logs/$d.log < $(DIMER_IN) > $(LOG);)
	@touch .make/lammps

else
lammps: | $(restart) .make $(FOLDERS) 
	@echo Production $(SAVE)
	@$(MPI) $(LAMMPS_PATH)$(LAMMPS) $(LAMMPS_FLAGS) $(LAMMPS_VARS) < $(LAMMPS_IN) > $(LOG)
	@touch .make/lammps
endif

# Analysis of run, both static and dynamic quantities
contact: program props.csv | $(FOLDERS) trj/out.lammpstrj
	@echo analysis $(SAVE)/trj/out.lammpstrj
	@$(BIN_PATH)/program -i trj/out.lammpstrj $(contact_args) > contact.log
	@python $(PYLIB)/density.py logs/prod.log $(radius) $(dist) $(theta) >> order.log
	@touch .make/contact

trj/out.lammpstrj:
	touch $@

props.csv: | trj/out.lammpstrj
	@python $(PYLIB)/makeplot.py logs/prod.log props.csv $(thermo)


movie: contact

collate: tex-files contact

status:

density: contact
	@echo Calculating density
	@python $(PYLIB)/density.py logs/prod.log $(radius) $(dist) $(theta) >> contact.log
	@touch .make/density

present:$(PRESENT)

$(PRESENT): tex-files collate
	@-rm -f mol_pres.tex
	@python $(my_dir)/output/presentEach.py $(PREFIX)/$(SAVE) >> mol_pres.tex
	@touch .make/present

tex-files: $(addsuffix .tex, $(to_plot))

%.tex: plot-% | my_latex
	@python $(my_dir)/output/create.py $(PREFIX)/$(SAVE) $(basename $@) > my_latex/$@

steps.dat: steps.py
	@python $(PYLIB)/steps.py $(steps) > $@

.make:
	@-mkdir .make

data:
	@mkdir -p $(PREFIX)/data

restarts:
	@mkdir -p $(PREFIX)/restarts

$(FOLDERS):
	@mkdir -p $@


my_latex:
	@mkdir -p $@

.PHONY: touch-lammps touch-contact
touch-lammps: | .make
	@touch .make/lammps

touch-contact: |.make
	@touch .make/contact

# Plots {{{
# ---------

plot: $(addprefix copy-, $(to_plot))
	@echo Generated Plots
	@touch .make/plot

copy-%: plot-% | %
	@echo copy $(subst copy-,,$@)
	@$(foreach f, $(wildcard myplot/$(subst copy-,,$@)*), cp $f ../plots/$(subst copy-,,$@)/$(notdir $(shell pwd))-$(notdir $f); )

plot-%: %.plot contact | %
	@echo $@
	@gnuplot -e "prefix='$(shell pwd)/'; term_type='$(term_type)'" $<  #&> $(LOG)
	@touch .make/$@

$(to_plot):
	@mkdir -p $(PREFIX)/plots/$@

# }}}
# Clean functions {{{

.PHONY: clean-all $(all_clean)
clean-all:$(all_clean)

clean-files: clean-restart
	rm -rf ../data
	rm -f .make/files

clean-restart: clean-lammps
	rm -rf ../restarts

clean-lammps: clean-contact
	rm -rf $(folder)
	rm -f .make/lammps

clean-contact: clean-plot clean-density
	rm -rf trj_contact/* stats/* order/*
	rm -f *.csv *.log *.dat
	rm -f .make/contact

clean-density: clean-present
	rm -f .make/density

clean-plot: clean-collate
	rm -f myplot/*
	rm -f .make/plot-*

clean-collate: clean-present
	rm -f my_latex/*

clean-present:
	-rm -f .make/present
	-rm -f mol_pres.tex

#}}}
# vim:foldmethod=marker:foldlevel=0
